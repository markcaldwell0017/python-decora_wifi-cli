# Leviton Cloud Services API model IotSwitch.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class IotSwitch(BaseModel):
    def __init__(self, session, model_id=None):
        super(IotSwitch, self).__init__(session, model_id)

    @classmethod
    def count(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def create(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_many(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches"
        return session.call_api(api, attribs, 'post')

    def delete_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def discover(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/{0}/discover".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    def exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/{0}/exists".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def find(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches"
        items = session.call_api(api, attribs, 'get')

        result = []
        if items is not None:
            for data in items:
                model = IotSwitch(session, data['id'])
                model.data = data
                result.append(model)
        return result

    def find_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        self.data.update(data)
        return self

    @classmethod
    def find_one(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/findOne"
        return session.call_api(api, attribs, 'get')

    def refresh(self):
        api = "/IotSwitches/{0}".format(self._id)
        result = self._session.call_api(api, {}, 'get')
        if result is not None:
            self.data.update(result)
        return self

    def get_residence(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/{0}/residence".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        from .residence import Residence
        model = Residence(self._session, data['id'])
        model.data = data
        return model

    def get_residential_room(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/{0}/residentialRoom".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        from .residential_room import ResidentialRoom
        model = ResidentialRoom(self._session, data['id'])
        model.data = data
        return model

    def identify(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/{0}/identify".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    def replace_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/{0}/replace".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def replace_or_create(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/replaceOrCreate"
        return session.call_api(api, attribs, 'post')

    def update_attributes(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'put')

        self.data.update(attribs)
        return self

    @classmethod
    def upsert(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches"
        data = session.call_api(api, attribs, 'put')

        model = IotSwitch(session, data['id'])
        model.data = data
        return model

    @classmethod
    def upsert_with_where(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/IotSwitches/upsertWithWhere"
        return session.call_api(api, attribs, 'post')

